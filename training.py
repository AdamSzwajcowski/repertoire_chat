import jsonimport randomimport pickleimport numpy as npimport nltkfrom nltk.stem import WordNetLemmatizerfrom tensorflow.keras.models import Sequentialfrom tensorflow.keras.layers import Dense, Dropoutfrom tensorflow.keras.optimizers import SGD# load the file with the training dataintents = json.loads(open('intents.json').read())# initialize listswords = []      # list of all wordsclasses = []    # list of all classes (tags)documents = []  # list of tuples (words, corresponding class)ignore_letters = ['?', '!', ',', '.']# iterate over the JSON file to create documentsfor intent in intents['intents']:    for pattern in intent['patterns']:        word_list = nltk.word_tokenize(pattern)        words.extend(word_list)        documents.append((word_list, intent['tag']))        if intent['tag'] not in classes:            classes.append(intent['tag'])# lemmatize the word list and delete repeating itemslemmatizer = WordNetLemmatizer()words = [lemmatizer.lemmatize(word.lower()) for word in words if word not in ignore_letters]words = sorted(set(words))# save the words and classes to binary fileswith open('model/words.pkl', 'wb') as words_file, open('model/classes.pkl', 'wb') as classes_file:    pickle.dump(words, words_file)    pickle.dump(classes, classes_file)# transform training data to numerical form    training = []output_empty = [0] * len(classes)# iterate over the documents to change the character of the data from text to binaryfor document in documents:    bag = []    word_patterns = document[0]    word_patterns = [lemmatizer.lemmatize(word.lower()) for word in word_patterns]    for word in words:        # mark the indices of the words used        bag.append(1) if word in word_patterns else bag.append(0)       # mark the index of the class (tag)        output_row = output_empty.copy()    output_row[classes.index(document[1])] = 1      training.append([bag, output_row])# shuffle the training datarandom.shuffle(training)   # prepare the data for trainingtrain_x = []train_y = []for item in training:               train_x.append(item[0])    train_y.append(item[1])    # build a modelmodel = Sequential()model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu'))model.add(Dropout(0.5))model.add(Dense(32, activation='relu'))model.add(Dropout(0.5))model.add(Dense(len(train_y[0]), activation='softmax'))# compile the modelsgd = SGD(learning_rate=0.01, momentum=0.9, nesterov=True)model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])# train the modelmodel.fit(np.array(train_x), np.array(train_y), epochs=200, batch_size=5, verbose=1)model.save('model/chatbot_model.keras')print("Done")